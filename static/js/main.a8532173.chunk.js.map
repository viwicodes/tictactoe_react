{"version":3,"sources":["index.js"],"names":["Reset","status","className","src","alt","onClick","window","location","reload","style","textAlign","color","Square","value","Game","winner","getStatus","renderSquare","Main","useState","next","setNext","Array","fill","squares","setSquares","possibleLines","i","length","a","b","c","calculateWinner","who","isBoardFull","newSquares","slice","ReactDOM","render","document","getElementById"],"mappings":"mLAIA,SAASA,EAAT,GAA4B,IAAXC,EAAU,EAAVA,OACf,OACE,qCACE,qBAAKC,UAAU,gBAAf,SACE,sBAAKA,UAAU,MAAf,UACE,6BAAKD,IACL,uBACA,uBACA,qBACEE,IAAI,cACJC,IAAI,MACJC,QAAS,WACPC,OAAOC,SAASC,YAGpB,uBACA,4BAGJ,oBAAIC,MAAO,CAAEC,UAAW,SAAUC,MAAO,SAAzC,4CAON,SAASC,EAAT,GAAqC,IAAnBC,EAAkB,EAAlBA,MAAOR,EAAW,EAAXA,QACvB,OACE,wBAAQH,UAAU,cAAcG,QAASA,EAAzC,SACGQ,IAKP,SAASC,EAAT,GAAmD,EAAnCC,OAAoC,IAA5BC,EAA2B,EAA3BA,UAAWC,EAAgB,EAAhBA,aACjC,OACE,qCACE,qBAAKf,UAAU,WAAf,SACE,wDAEF,qBAAKA,UAAU,gBAAf,SACE,sBAAKA,UAAU,YAAf,UACE,qBAAKA,UAAU,SACde,EAAa,GACbA,EAAa,GACbA,EAAa,GACbA,EAAa,GACbA,EAAa,GACbA,EAAa,GACbA,EAAa,GACbA,EAAa,GACbA,EAAa,QAGlB,qBAAKf,UAAU,OAAf,SACE,+BAAOc,WAOf,SAASE,IACP,MAAwBC,oBAAS,GAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAA8BF,mBAASG,MAAM,GAAGC,KAAK,OAArD,mBAAOC,EAAP,KAAgBC,EAAhB,KACMV,EAwDR,SAAyBS,GAWvB,IAVA,IAAME,EAAgB,CACpB,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAEAC,EAAI,EAAGA,EAAID,EAAcE,OAAQD,IAAK,CAC7C,kBAAkBD,EAAcC,GAAhC,GAAOE,EAAP,KAAUC,EAAV,KAAaC,EAAb,KACA,GAAIP,EAAQK,IAAML,EAAQK,KAAOL,EAAQM,IAAMN,EAAQK,KAAOL,EAAQO,GACpE,OAAOP,EAAQK,GAGnB,OAAO,KAzEQG,CAAgBR,GACzBS,EAAMb,EAAO,IAAM,IAEzB,SAASJ,IACP,OAAID,EACKA,EAAS,SAAWkB,EAClBC,EAAYV,GACd,uBAEA,aAAeS,EAqB1B,OACE,mCACGlB,GAAUmB,EAAYV,GACrB,cAACxB,EAAD,CAAOC,OAAQe,MAEf,cAACF,EAAD,CACEC,OAAQA,EACRC,UAAWA,EACXC,aAzBR,SAAsBU,GACpB,OACE,cAACf,EAAD,CACEC,MAAOW,EAAQG,GACftB,QAAS,WACP,GAAkB,MAAdmB,EAAQG,IAAwB,MAAVZ,EAA1B,CAGA,IAAMoB,EAAaX,EAAQY,QAC3BD,EAAWR,GAAKM,EAChBR,EAAWU,GACXd,GAASD,YAuBnB,SAASc,EAAYV,GACnB,IAAK,IAAIG,EAAI,EAAGA,EAAIH,EAAQI,OAAQD,IAClC,GAAkB,MAAdH,EAAQG,GACV,OAAO,EAGX,OAAO,EARTU,IAASC,OAAO,cAACpB,EAAD,IAAUqB,SAASC,eAAe,W","file":"static/js/main.a8532173.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./style.css\";\n\nfunction Reset({ status }) {\n  return (\n    <>\n      <div className=\"gameContainer\">\n        <div className=\"res\">\n          <h1>{status}</h1>\n          <br />\n          <br />\n          <img\n            src=\"./giphy.gif\"\n            alt=\"pic\"\n            onClick={() => {\n              window.location.reload();\n            }}\n          />\n          <br />\n          <br />\n        </div>\n      </div>\n      <h3 style={{ textAlign: \"center\", color: \"white\" }}>\n        Tap SquidWard to play again\n      </h3>\n    </>\n  );\n}\n\nfunction Square({ value, onClick }) {\n  return (\n    <button className=\"box boxtext\" onClick={onClick}>\n      {value}\n    </button>\n  );\n}\n\nfunction Game({ winner, getStatus, renderSquare }) {\n  return (\n    <>\n      <div className=\"gameInfo\">\n        <h1>Let's play TicTacToe</h1>\n      </div>\n      <div className=\"gameContainer\">\n        <div className=\"container\">\n          <div className=\"line\"></div>\n          {renderSquare(0)}\n          {renderSquare(1)}\n          {renderSquare(2)}\n          {renderSquare(3)}\n          {renderSquare(4)}\n          {renderSquare(5)}\n          {renderSquare(6)}\n          {renderSquare(7)}\n          {renderSquare(8)}\n        </div>\n      </div>\n      <div className=\"info\">\n        <span>{getStatus()}</span>\n      </div>\n      \n    </>\n  );\n}\n\nfunction Main() {\n  const [next, setNext] = useState(true);\n  const [squares, setSquares] = useState(Array(9).fill(null));\n  const winner = calculateWinner(squares);\n  const who = next ? \"X\" : \"O\";\n\n  function getStatus() {\n    if (winner) {\n      return winner + \" beat \" + who;\n    } else if (isBoardFull(squares)) {\n      return \"That's a draw match!\";\n    } else {\n      return \"Next turn \" + who;\n    }\n  }\n\n  function renderSquare(i) {\n    return (\n      <Square\n        value={squares[i]}\n        onClick={() => {\n          if (squares[i] != null || winner != null) {\n            return;\n          }\n          const newSquares = squares.slice();\n          newSquares[i] = who;\n          setSquares(newSquares);\n          setNext(!next);\n        }}\n      />\n    );\n  }\n\n  return (\n    <>\n      {winner || isBoardFull(squares) ? (\n        <Reset status={getStatus()} />\n      ) : (\n        <Game\n          winner={winner}\n          getStatus={getStatus}\n          renderSquare={renderSquare}\n        />\n      )}\n    </>\n  );\n}\n\nReactDOM.render(<Main />, document.getElementById(\"root\"));\n\nfunction isBoardFull(squares) {\n  for (let i = 0; i < squares.length; i++) {\n    if (squares[i] == null) {\n      return false;\n    }\n  }\n  return true;\n}\n\nfunction calculateWinner(squares) {\n  const possibleLines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n  for (let i = 0; i < possibleLines.length; i++) {\n    const [a, b, c] = possibleLines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n  return null;\n}\n"],"sourceRoot":""}